/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.example.ui;

import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.auth.Credentials;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.speech.v1.RecognitionAudio;
import com.google.cloud.speech.v1.RecognitionConfig;
import com.google.cloud.speech.v1.RecognitionConfig.AudioEncoding;
import com.google.cloud.speech.v1.RecognizeRequest;
import com.google.cloud.speech.v1.RecognizeResponse;
import com.google.cloud.speech.v1.SpeechClient;
import com.google.cloud.speech.v1.SpeechRecognitionAlternative;
import com.google.cloud.speech.v1.SpeechRecognitionResult;
import com.google.cloud.speech.v1.SpeechSettings;
import com.google.protobuf.ByteString;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;
import javax.swing.JButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import org.apache.commons.lang3.math.NumberUtils;
import org.example.classes.Cita;
import org.example.connections.CitaDAO;

/**
 *
 * @author Sebastián
 */
public class AsistenteVozCitaUI extends javax.swing.JFrame {

    /**
     * Creates new form AsistenteVozCitaUI
     */
    public AsistenteVozCitaUI() {
        initComponents();
        setLocation(520, 200);
    }

    private String patientID;

    public void setPatientID(String patientID) {
        this.patientID = patientID;
        // Puedes hacer cualquier otra operación necesaria con el ID del paciente aquí
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        inputDia = new javax.swing.JTextField();
        inputAnnio = new javax.swing.JTextField();
        inputHora = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        inputMinuto = new javax.swing.JTextField();
        inputMes = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnPlayDia = new javax.swing.JButton();
        btnPauseDia = new javax.swing.JButton();
        btnPlayMes = new javax.swing.JButton();
        btnPauseMes = new javax.swing.JButton();
        btnPauseAnnio = new javax.swing.JButton();
        btnPlayAnnio = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnPlayHora = new javax.swing.JButton();
        btnPauseHora = new javax.swing.JButton();
        btnPlayMinuto = new javax.swing.JButton();
        btnPauseMinuto = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        inputEspecialidad = new javax.swing.JTextField();
        btnPlayEspecialidad = new javax.swing.JButton();
        btnPauseEspecialidad = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputNotas = new javax.swing.JTextArea();
        btnPlayNotas = new javax.swing.JButton();
        btnPauseNotas = new javax.swing.JButton();
        btnAgregarCita = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel1.setText("Grabar fecha:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel2.setText("Grabar hora:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel3.setText("Grabar especialidad:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jLabel4.setText("Grabar notas:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Día:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Mes:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Año:");

        btnPlayDia.setText(" ▶️");
        btnPlayDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayDiaActionPerformed(evt);
            }
        });

        btnPauseDia.setText("⏹️");
        btnPauseDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseDiaActionPerformed(evt);
            }
        });

        btnPlayMes.setText(" ▶️");
        btnPlayMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayMesActionPerformed(evt);
            }
        });

        btnPauseMes.setText("⏹️");
        btnPauseMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseMesActionPerformed(evt);
            }
        });

        btnPauseAnnio.setText("⏹️");
        btnPauseAnnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseAnnioActionPerformed(evt);
            }
        });

        btnPlayAnnio.setText(" ▶️");
        btnPlayAnnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayAnnioActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Hora:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Minuto:");

        btnPlayHora.setText(" ▶️");
        btnPlayHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayHoraActionPerformed(evt);
            }
        });

        btnPauseHora.setText("⏹️");
        btnPauseHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseHoraActionPerformed(evt);
            }
        });

        btnPlayMinuto.setText(" ▶️");
        btnPlayMinuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayMinutoActionPerformed(evt);
            }
        });

        btnPauseMinuto.setText("⏹️");
        btnPauseMinuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseMinutoActionPerformed(evt);
            }
        });

        inputEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputEspecialidadActionPerformed(evt);
            }
        });

        btnPlayEspecialidad.setText(" ▶️");
        btnPlayEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayEspecialidadActionPerformed(evt);
            }
        });

        btnPauseEspecialidad.setText("⏹️");
        btnPauseEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseEspecialidadActionPerformed(evt);
            }
        });

        inputNotas.setColumns(20);
        inputNotas.setRows(5);
        jScrollPane1.setViewportView(inputNotas);

        btnPlayNotas.setText(" ▶️");
        btnPlayNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayNotasActionPerformed(evt);
            }
        });

        btnPauseNotas.setText("⏹️");
        btnPauseNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseNotasActionPerformed(evt);
            }
        });

        btnAgregarCita.setBackground(new java.awt.Color(255, 102, 0));
        btnAgregarCita.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAgregarCita.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarCita.setText("Agregar cita");
        btnAgregarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCitaActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(255, 102, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 102, 0));
        jLabel10.setText("Asistente de voz");

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setText("Volver");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPlayNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPauseNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarCita, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addGap(0, 0, Short.MAX_VALUE)
                                                    .addComponent(btnPlayMes, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnPauseMes, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addGap(259, 259, 259))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(61, 61, 61)
                                                    .addComponent(inputMes)
                                                    .addGap(134, 134, 134))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel7)
                                                    .addGap(36, 36, 36)
                                                    .addComponent(inputAnnio)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(btnPlayAnnio, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnPauseAnnio, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnPlayDia, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnPauseDia, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(103, 103, 103))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jLabel9))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(inputHora, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                                    .addComponent(inputMinuto))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(btnPlayHora, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnPauseHora, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(btnPlayMinuto, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnPauseMinuto, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(105, 105, 105)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(inputEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPlayEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPauseEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator4)
                                    .addComponent(jScrollPane1)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(39, 39, 39)
                                .addComponent(inputDia, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jButton4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnPauseDia)
                            .addComponent(btnPlayDia)
                            .addComponent(inputDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel6)
                            .addComponent(inputMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlayMes)
                            .addComponent(btnPauseMes))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(inputAnnio)
                            .addComponent(btnPlayAnnio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPauseAnnio))
                        .addGap(72, 72, 72))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnPauseEspecialidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPlayEspecialidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(120, 120, 120))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(inputEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnPauseHora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnPlayHora))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(inputHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputMinuto)
                            .addComponent(jLabel9)
                            .addComponent(btnPauseMinuto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPlayMinuto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPauseNotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPlayNotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnAgregarCita)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlayNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayNotasActionPerformed
        startRecording(btnPlayNotas, btnPauseNotas);
    }//GEN-LAST:event_btnPlayNotasActionPerformed

    private void btnPlayEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayEspecialidadActionPerformed
        startRecording(btnPlayEspecialidad, btnPauseEspecialidad);
    }//GEN-LAST:event_btnPlayEspecialidadActionPerformed

    private void inputEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputEspecialidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputEspecialidadActionPerformed

    private void btnPlayMinutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayMinutoActionPerformed
        startRecording(btnPlayMinuto, btnPauseMinuto);
    }//GEN-LAST:event_btnPlayMinutoActionPerformed

    private void btnPlayHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayHoraActionPerformed
        startRecording(btnPlayHora, btnPauseHora);
    }//GEN-LAST:event_btnPlayHoraActionPerformed

    private void btnPlayAnnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayAnnioActionPerformed
        startRecording(btnPlayAnnio, btnPauseAnnio);
    }//GEN-LAST:event_btnPlayAnnioActionPerformed

    private void btnPlayMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayMesActionPerformed
        startRecording(btnPlayMes, btnPauseMes);
    }//GEN-LAST:event_btnPlayMesActionPerformed

    TargetDataLine targetDataLine;
    AudioFormat audioFormat;
    boolean isRecording = false;
    boolean isWritingComplete = false;

    private void btnPlayDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayDiaActionPerformed
        startRecording(btnPlayDia, btnPauseDia);
    }//GEN-LAST:event_btnPlayDiaActionPerformed

    private void startRecording(JButton play, JButton pause) {
        try {
            audioFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, 44100, 16, 1, 2, 44100, false);

            DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
            targetDataLine = (TargetDataLine) AudioSystem.getLine(dataLineInfo);
            targetDataLine.open(audioFormat);
            targetDataLine.start();

            isRecording = true;
            play.setEnabled(false);
            pause.setEnabled(true);

            Thread recordingThread = new Thread(new Runnable() {
                public void run() {
                    captureAudio();
                }
            });
            recordingThread.start();

        } catch (LineUnavailableException ex) {
            ex.printStackTrace();
        }
    }

    private void stopRecording(JButton play, JButton pause, JTextField holder) {
        isRecording = false;
        play.setEnabled(true);
        pause.setEnabled(false);

        targetDataLine.stop();
        targetDataLine.close();

        // Esperar a que se complete la escritura del archivo
        while (!isWritingComplete) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }

        // Transcribir el audio y guardar el resultado en el TextField "inputdia"
        try {
            String credentialsPath = "src/main/java/org/example/connections/credenciales.json";
            Credentials credentials = GoogleCredentials.fromStream(new FileInputStream(credentialsPath));

            try (SpeechClient speechClient = SpeechClient.create(SpeechSettings.newBuilder().setCredentialsProvider(FixedCredentialsProvider.create(credentials)).build())) {

                String audioFilePath = "src/main/java/org/example/audios/grabacion.wav";
                byte[] audioBytes = Files.readAllBytes(Paths.get(audioFilePath));
                ByteString audioData = ByteString.copyFrom(audioBytes);

                RecognitionConfig config = RecognitionConfig.newBuilder()
                        .setEncoding(AudioEncoding.LINEAR16)
                        .setSampleRateHertz(44100)
                        .setLanguageCode("es-ES")
                        .build();

                RecognitionAudio audio = RecognitionAudio.newBuilder().setContent(audioData).build();
                RecognizeRequest request = RecognizeRequest.newBuilder().setConfig(config).setAudio(audio).build();

                RecognizeResponse response = speechClient.recognize(request);

                // Obtener el primer resultado de transcripción
                if (!response.getResultsList().isEmpty()) {
                    SpeechRecognitionResult result = response.getResults(0);
                    SpeechRecognitionAlternative alternative = result.getAlternatives(0);
                    String transcript = alternative.getTranscript();
                    holder.setText(transcript);
                }
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Error: Archivo de credenciales no encontrado.");
        } catch (IOException ex) {
            System.err.println("Error al leer el archivo de audio.");
        }
    }

    private void stopRecordingAlter(JButton play, JButton pause, JTextArea holder) {
        isRecording = false;
        play.setEnabled(true);
        pause.setEnabled(false);

        targetDataLine.stop();
        targetDataLine.close();

        // Esperar a que se complete la escritura del archivo
        while (!isWritingComplete) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }

        // Transcribir el audio y guardar el resultado en el TextField "inputdia"
        try {
            String credentialsPath = "src/main/java/org/example/connections/credenciales.json";
            Credentials credentials = GoogleCredentials.fromStream(new FileInputStream(credentialsPath));

            try (SpeechClient speechClient = SpeechClient.create(SpeechSettings.newBuilder().setCredentialsProvider(FixedCredentialsProvider.create(credentials)).build())) {

                String audioFilePath = "src/main/java/org/example/audios/grabacion.wav";
                byte[] audioBytes = Files.readAllBytes(Paths.get(audioFilePath));
                ByteString audioData = ByteString.copyFrom(audioBytes);

                RecognitionConfig config = RecognitionConfig.newBuilder()
                        .setEncoding(AudioEncoding.LINEAR16)
                        .setSampleRateHertz(44100)
                        .setLanguageCode("es-ES")
                        .build();

                RecognitionAudio audio = RecognitionAudio.newBuilder().setContent(audioData).build();
                RecognizeRequest request = RecognizeRequest.newBuilder().setConfig(config).setAudio(audio).build();

                RecognizeResponse response = speechClient.recognize(request);

                // Obtener el primer resultado de transcripción
                if (!response.getResultsList().isEmpty()) {
                    SpeechRecognitionResult result = response.getResults(0);
                    SpeechRecognitionAlternative alternative = result.getAlternatives(0);
                    String transcript = alternative.getTranscript();
                    holder.setText(transcript);
                }
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Error: Archivo de credenciales no encontrado.");
        } catch (IOException ex) {
            System.err.println("Error al leer el archivo de audio.");
        }
    }

    private void captureAudio() {
        try {
            String relativePath = "src/main/java/org/example/audios/grabacion.wav"; // Ruta relativa dentro de la carpeta src
            File outputFile = new File(relativePath);

            // Obtén la ruta absoluta del archivo de salida
            String absolutePath = outputFile.getAbsolutePath();

            // Crea los directorios necesarios si no existen
            File parentDir = new File(outputFile.getParent());
            if (!parentDir.exists()) {
                parentDir.mkdirs();
            }

            AudioInputStream audioInputStream = new AudioInputStream(targetDataLine);
            AudioSystem.write(audioInputStream, AudioFileFormat.Type.WAVE, outputFile);

            // La escritura del archivo ha finalizado
            isWritingComplete = true;

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        TramitesUI frameTipoUsuarioMetodo = new TramitesUI();
        // Hacer visible el nuevo frame
        frameTipoUsuarioMetodo.setVisible(true);
        // Cerrar el frame actual
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnPauseDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseDiaActionPerformed
        stopRecording(btnPlayDia, btnPauseDia, inputDia);
    }//GEN-LAST:event_btnPauseDiaActionPerformed

    private void btnPauseMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseMesActionPerformed
        stopRecording(btnPlayMes, btnPauseMes, inputMes);
    }//GEN-LAST:event_btnPauseMesActionPerformed

    private void btnPauseAnnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseAnnioActionPerformed
        stopRecording(btnPlayAnnio, btnPauseAnnio, inputAnnio);
    }//GEN-LAST:event_btnPauseAnnioActionPerformed

    private void btnPauseHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseHoraActionPerformed
        stopRecording(btnPlayHora, btnPauseHora, inputHora);
    }//GEN-LAST:event_btnPauseHoraActionPerformed

    private void btnPauseMinutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseMinutoActionPerformed
        stopRecording(btnPlayMinuto, btnPauseMinuto, inputMinuto);
    }//GEN-LAST:event_btnPauseMinutoActionPerformed

    private void btnPauseEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseEspecialidadActionPerformed
        stopRecording(btnPlayEspecialidad, btnPauseEspecialidad, inputEspecialidad);
    }//GEN-LAST:event_btnPauseEspecialidadActionPerformed

    private void btnPauseNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseNotasActionPerformed
        stopRecordingAlter(btnPlayNotas, btnPauseNotas, inputNotas);
    }//GEN-LAST:event_btnPauseNotasActionPerformed

    private int obtenerIndiceMes(String mes) {
        String[] nombresMeses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
        for (int i = 0; i < nombresMeses.length; i++) {
            if (nombresMeses[i].equalsIgnoreCase(mes)) {
                return i;
            }
        }
        return -1; // Si no se encuentra el mes, devuelve -1
    }

    public void limpiarCampos() {
        inputEspecialidad.setText("");
        inputDia.setText("");
        inputAnnio.setText("");
        inputHora.setText("");
        inputMes.setText("");
        inputMinuto.setText("");
        inputNotas.setText("");
    }

    public boolean revisarContenido() {
        String especialidad = inputEspecialidad.getText();
        String diaString = inputDia.getText();
        String anioString = inputAnnio.getText();
        String horaString = inputHora.getText();
        String mesString = inputMes.getText();
        String minutoString = inputMinuto.getText();

        // Verificar que ningún campo esté vacío
        if (especialidad.isBlank() || diaString.isBlank() || anioString.isBlank()
                || horaString.isBlank() || mesString.isBlank() || minutoString.isBlank()) {
            return false;
        }

        // Convertir los valores a números
        int dia = convertirDiaStringANumero(diaString);
        int anio = convertirAnioStringANumero(anioString);
        int hora = convertirHoraStringANumero(horaString);
        int minuto = convertirMinutosStringANumero(minutoString);

        // Validar los valores numéricos
        if (dia < 1 || dia > 31 || anio < 2023 || hora < 0 || hora > 23 || minuto < 0 || minuto > 59) {
            return false;
        }

        // Validar el mes en texto
        if (!esMesValido(mesString.toLowerCase())) {
            return false;
        }

        return true; // Si todos los campos están llenos y los valores son válidos, retornamos true
    }

    private boolean esMesValido(String mesString) {
        Map<String, Integer> mesesMap = crearMapaMeses();
        return mesesMap.containsKey(mesString);
    }

    private Map<String, Integer> crearMapaMeses() {
        Map<String, Integer> mesesMap = new HashMap<>();
        mesesMap.put("enero", 1);
        mesesMap.put("febrero", 2);
        mesesMap.put("marzo", 3);
        mesesMap.put("abril", 4);
        mesesMap.put("mayo", 5);
        mesesMap.put("junio", 6);
        mesesMap.put("julio", 7);
        mesesMap.put("agosto", 8);
        mesesMap.put("septiembre", 9);
        mesesMap.put("setiembre", 9);
        mesesMap.put("octubre", 10);
        mesesMap.put("noviembre", 11);
        mesesMap.put("diciembre", 12);
        return mesesMap;
    }

    public static int convertirDiaStringANumero(String diaString) {
        if (NumberUtils.isParsable(diaString)) {
            return Integer.parseInt(diaString);
        } else {
            return 0; // o cualquier valor predeterminado que desees asignar en caso de que no se pueda convertir
        }
    }

    public static int convertirAnioStringANumero(String anioString) {
        if (NumberUtils.isParsable(anioString)) {
            return Integer.parseInt(anioString);
        } else {
            return 0; // o cualquier valor predeterminado que desees asignar en caso de que no se pueda convertir
        }
    }

    public static int convertirHoraStringANumero(String horaString) {
        if (NumberUtils.isParsable(horaString)) {
            return Integer.parseInt(horaString);
        } else {
            return 0; // o cualquier valor predeterminado que desees asignar en caso de que no se pueda convertir
        }
    }

    public static int convertirMinutosStringANumero(String minutosString) {
        if (NumberUtils.isParsable(minutosString)) {
            return Integer.parseInt(minutosString);
        } else {
            return 0; // o cualquier valor predeterminado que desees asignar en caso de que no se pueda convertir
        }
    }

    private void btnAgregarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCitaActionPerformed
        if (revisarContenido()) {
            Cita stickCita = new Cita();
            stickCita.setAppointmentAttendant(patientID);

            int dia;
            String diaString = inputDia.getText();
            try {
                dia = Integer.parseInt(diaString);
            } catch (NumberFormatException e) {
                dia = convertirDiaStringANumero(diaString);
            }

            String mesString = inputMes.getText();
            int anio;
            String anioString = inputAnnio.getText();
            try {
                anio = Integer.parseInt(anioString);
            } catch (NumberFormatException e) {
                anio = convertirAnioStringANumero(anioString);
            }

            // Crear un objeto Calendar con la fecha seleccionada
            Calendar calendar = Calendar.getInstance();
            calendar.set(anio, obtenerIndiceMes(mesString), dia);
            // Crear un objeto Date a partir del objeto Calendar
            Date fechaDate = calendar.getTime();
            stickCita.setAppointmentDate(fechaDate);

            stickCita.setAppointmentNotes(inputNotas.getText());

            stickCita.setAppointmentSpecialty(inputEspecialidad.getText());

            stickCita.setAppointmentStatus("registrada");

            int hora;
            String horaString = inputHora.getText();
            try {
                hora = Integer.parseInt(horaString);
            } catch (NumberFormatException e) {
                hora = convertirHoraStringANumero(horaString);
            }

            int minutos;
            String minutosString = inputMinuto.getText();
            try {
                minutos = Integer.parseInt(minutosString);
            } catch (NumberFormatException e) {
                minutos = convertirMinutosStringANumero(minutosString);
            }

            String horaCompleta = String.format("%02d:%02d", hora, minutos);
            stickCita.setAppointmentTime(horaCompleta);

            CitaDAO citadb = new CitaDAO();
            citadb.agregarCita(stickCita);

            CitaCreada winUsuarioCreado = new CitaCreada();
            winUsuarioCreado.setVisible(true);
            limpiarCampos();
            dispose();
        } else {
            ErrorDatosIngresadosUI frameTipoUsuarioMetodo = new ErrorDatosIngresadosUI();
            frameTipoUsuarioMetodo.setVisible(true);
        }
    }//GEN-LAST:event_btnAgregarCitaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsistenteVozCitaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsistenteVozCitaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsistenteVozCitaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsistenteVozCitaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsistenteVozCitaUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCita;
    private javax.swing.JButton btnPauseAnnio;
    private javax.swing.JButton btnPauseDia;
    private javax.swing.JButton btnPauseEspecialidad;
    private javax.swing.JButton btnPauseHora;
    private javax.swing.JButton btnPauseMes;
    private javax.swing.JButton btnPauseMinuto;
    private javax.swing.JButton btnPauseNotas;
    private javax.swing.JButton btnPlayAnnio;
    private javax.swing.JButton btnPlayDia;
    private javax.swing.JButton btnPlayEspecialidad;
    private javax.swing.JButton btnPlayHora;
    private javax.swing.JButton btnPlayMes;
    private javax.swing.JButton btnPlayMinuto;
    private javax.swing.JButton btnPlayNotas;
    private javax.swing.JTextField inputAnnio;
    private javax.swing.JTextField inputDia;
    private javax.swing.JTextField inputEspecialidad;
    private javax.swing.JTextField inputHora;
    private javax.swing.JTextField inputMes;
    private javax.swing.JTextField inputMinuto;
    private javax.swing.JTextArea inputNotas;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
